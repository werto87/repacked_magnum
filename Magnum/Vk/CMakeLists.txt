target_sources(${TARGET_NAME} PRIVATE
Mesh.h
Framebuffer.cpp

PixelFormat.cpp
ComputePipelineCreateInfo.h
MeshLayout.cpp
Buffer.cpp
FenceCreateInfo.h
SamplerCreateInfo.h
DescriptorSetLayout.h
ImageCreateInfo.h
PipelineLayout.cpp
DescriptorPool.cpp
DescriptorSet.h
Image.cpp
ExtensionProperties.cpp
TypeTraits.h
LayerProperties.cpp
Pipeline.h
Version.h
DescriptorSet.cpp
Sampler.cpp
RasterizationPipelineCreateInfo.h
DescriptorType.h
Shader.cpp
CommandBuffer.cpp
Shader.h
InstanceCreateInfo.h
VertexFormat.cpp
Memory.cpp
Queue.h
Sampler.h
RenderPassCreateInfo.h
Version.cpp
Memory.h
CommandPool.cpp
PipelineLayoutCreateInfo.h
CommandBuffer.h
Device.h
PipelineLayout.h
LayerProperties.h
RenderPass.h
Queue.cpp
DescriptorType.cpp
Result.h
PixelFormat.h
Extensions.h
Pipeline.cpp
Instance.h
visibility.h
MemoryAllocateInfo.h
Extensions.cpp
ShaderSet.h
Vulkan.h
Buffer.h
DeviceFeatures.cpp
FramebufferCreateInfo.h
vk-info.cpp
Handle.h
ImageView.cpp
DescriptorPool.h
MeshLayout.h
Image.h
Framebuffer.h
DeviceCreateInfo.h
Handle.cpp
DeviceFeatures.h
DescriptorSetLayout.cpp
ExtensionProperties.h
CommandPoolCreateInfo.h
Assert.h
Integration.h
DescriptorPoolCreateInfo.h
DeviceProperties.cpp
Fence.h
RenderPass.cpp
Mesh.cpp
CommandPool.h
ImageViewCreateInfo.h
ShaderCreateInfo.h
ImageView.h
VertexFormat.h
Fence.cpp
Result.cpp
Instance.cpp
Vk.h
DeviceProperties.h
ShaderSet.cpp
BufferCreateInfo.h
DescriptorSetLayoutCreateInfo.h
Device.cpp
)

if(MAGNUM_TARGET_VK)
    target_sources(${TARGET_NAME} PRIVATE
    VulkanTester.cpp
    VulkanTester.h    
    )
endif()



add_subdirectory(Implementation)
